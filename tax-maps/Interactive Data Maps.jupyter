nbformat 4
nbformat_minor 0
markdown
    # Interactive Data Maps
    
    This notebook shows how to create maps in a notebook, *without* having to write a ton of JavaScript or Python code.  It uses [folium](https://github.com/python-visualization/folium), which leverages [Leaflet.js](http://leafletjs.com/), a popular JavaScript library to create interactive maps.  `folium` supports base maps using tilesets from [MapBox](https://www.mapbox.com/), [OpenStreetMap](http://www.openstreetmap.org/), and others, out of the box.   `folium` also makes it very easy to plot data on maps using GeoJSON and TopoJSON overlays.
    
    ## Prerequisites
    
    You will need to install the following in order to run this notebook.
    
    * [folium](https://github.com/python-visualization/folium), to create and render geographical maps
    * [xlrd](https://pypi.python.org/pypi/xlrd), to load excel spreadsheets
    * [seaborn](http://stanford.edu/~mwaskom/software/seaborn/index.html), to create nice-looking statistical plots
    * [matplotlib](http://matplotlib.org/), and [pandas](http://pandas.pydata.org/) 0.15.0 or later, to enable pie plots
    
    ```
    !pip install folium==0.1.3
    !pip install xlrd==0.9.3
    !pip install seaborn==0.5.1
    !pip install matplotlib==1.4.3
    !pip install pandas==0.15.2
    ```
code 3
    %matplotlib inline
  metadata
    {
     "collapsed": true
    }
code 4
    import matplotlib.pyplot as plt
  metadata
    {
     "collapsed": true
    }
code 5
    import pandas
    import seaborn
  metadata
    {
     "collapsed": true
    }
markdown
    ## State Government Tax Collections
    
    This notebook uses state government tax collections data from the US Census Bureau.  The [data](http://www.census.gov/govs/statetax/) are for fiscal year 2013.  The data file contains tax collections by US state governments for for a variety of tax categories, such as income, property, and sales taxes.
  metadata
    {
     "render": true
    }
code 6
    !wget -O 13staxcd.txt http://www2.census.gov/govs/statetax/13staxcd.txt
  stream stdout
    --2015-04-10 17:51:24--  http://www2.census.gov/govs/statetax/13staxcd.txt
    Resolving www2.census.gov (www2.census.gov)... 23.62.6.66, 23.62.6.35, 2001:559:0:5e::1743:f66b, ...
    Connecting to www2.census.gov (www2.census.gov)|23.62.6.66|:80... connected.
    HTTP request sent, awaiting response... 200 OK
    Length: 16529 (16K) [text/plain]
    Saving to: ‘13staxcd.txt’
    
    100%[======================================>] 16,529      --.-K/s   in 0.1s    
    
    2015-04-10 17:51:25 (127 KB/s) - ‘13staxcd.txt’ saved [16529/16529]
    
  metadata
    {
     "collapsed": false,
     "scrolled": true
    }
code 7
    df = pandas.read_csv('13staxcd.txt', index_col='ST').dropna(axis=1)
    # Because, yeah, values are in 1000s of dollars
    df = df * 1000
    df.head()
  execute_result
  - text/plain
                 AL        AK          AZ          AR           CA          CO  \
    ST                                                                           
    T01   322300000  99598000   762651000  1022066000   1982208000           0   
    T09  2331676000         0  6472777000  2837788000  33915885000  2416731000   
    T10   173252000  39194000    68684000    50656000    357000000    39217000   
    T11       93000   8427000      531000    36109000            0    94699000   
    T12   297958000  60236000   424369000   162962000   2242379000   211320000   
    
                 CT        DE           FL          GA    ...             SD  \
    ST                                                    ...                  
    T01           0         0       360000    61052000    ...              0   
    T09  3855861000         0  20785507000  5277211000    ...      853570000   
    T10    52015000  18412000    486278000   180786000    ...       16027000   
    T11   382390000         0    165804000           0    ...        9325000   
    T12   242448000  87512000    657710000   329237000    ...       71989000   
    
                 TN           TX          UT         VT          VA           WA  \
    ST                                                                             
    T01           0            0           0  971718000    33188000   1939883000   
    T09  6629923000  26127421000  1884170000  347273000  3708389000  11122868000   
    T10   140068000    984423000    48228000   23159000   204049000    364795000   
    T11           0     39979000           0          0       81000            0   
    T12   686280000   1788471000   108872000   57517000   392397000    436118000   
    
                 WV          WI         WY  
    ST                                      
    T01     6149000   148600000  331899000  
    T09  1255377000  4410130000  702623000  
    T10    17690000    57290000    1802000  
    T11    70259000      243000          0  
    T12   151136000   176710000   18419000  
    
    [5 rows x 50 columns]
  - text/html
    <div style="max-height:1000px;max-width:1500px;overflow:auto;">
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>AL</th>
          <th>AK</th>
          <th>AZ</th>
          <th>AR</th>
          <th>CA</th>
          <th>CO</th>
          <th>CT</th>
          <th>DE</th>
          <th>FL</th>
          <th>GA</th>
          <th>...</th>
          <th>SD</th>
          <th>TN</th>
          <th>TX</th>
          <th>UT</th>
          <th>VT</th>
          <th>VA</th>
          <th>WA</th>
          <th>WV</th>
          <th>WI</th>
          <th>WY</th>
        </tr>
        <tr>
          <th>ST</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>T01</th>
          <td>  322300000</td>
          <td> 99598000</td>
          <td>  762651000</td>
          <td> 1022066000</td>
          <td>  1982208000</td>
          <td>          0</td>
          <td>          0</td>
          <td>        0</td>
          <td>      360000</td>
          <td>   61052000</td>
          <td>...</td>
          <td>         0</td>
          <td>          0</td>
          <td>           0</td>
          <td>          0</td>
          <td> 971718000</td>
          <td>   33188000</td>
          <td>  1939883000</td>
          <td>    6149000</td>
          <td>  148600000</td>
          <td> 331899000</td>
        </tr>
        <tr>
          <th>T09</th>
          <td> 2331676000</td>
          <td>        0</td>
          <td> 6472777000</td>
          <td> 2837788000</td>
          <td> 33915885000</td>
          <td> 2416731000</td>
          <td> 3855861000</td>
          <td>        0</td>
          <td> 20785507000</td>
          <td> 5277211000</td>
          <td>...</td>
          <td> 853570000</td>
          <td> 6629923000</td>
          <td> 26127421000</td>
          <td> 1884170000</td>
          <td> 347273000</td>
          <td> 3708389000</td>
          <td> 11122868000</td>
          <td> 1255377000</td>
          <td> 4410130000</td>
          <td> 702623000</td>
        </tr>
        <tr>
          <th>T10</th>
          <td>  173252000</td>
          <td> 39194000</td>
          <td>   68684000</td>
          <td>   50656000</td>
          <td>   357000000</td>
          <td>   39217000</td>
          <td>   52015000</td>
          <td> 18412000</td>
          <td>   486278000</td>
          <td>  180786000</td>
          <td>...</td>
          <td>  16027000</td>
          <td>  140068000</td>
          <td>   984423000</td>
          <td>   48228000</td>
          <td>  23159000</td>
          <td>  204049000</td>
          <td>   364795000</td>
          <td>   17690000</td>
          <td>   57290000</td>
          <td>   1802000</td>
        </tr>
        <tr>
          <th>T11</th>
          <td>      93000</td>
          <td>  8427000</td>
          <td>     531000</td>
          <td>   36109000</td>
          <td>           0</td>
          <td>   94699000</td>
          <td>  382390000</td>
          <td>        0</td>
          <td>   165804000</td>
          <td>          0</td>
          <td>...</td>
          <td>   9325000</td>
          <td>          0</td>
          <td>    39979000</td>
          <td>          0</td>
          <td>         0</td>
          <td>      81000</td>
          <td>           0</td>
          <td>   70259000</td>
          <td>     243000</td>
          <td>         0</td>
        </tr>
        <tr>
          <th>T12</th>
          <td>  297958000</td>
          <td> 60236000</td>
          <td>  424369000</td>
          <td>  162962000</td>
          <td>  2242379000</td>
          <td>  211320000</td>
          <td>  242448000</td>
          <td> 87512000</td>
          <td>   657710000</td>
          <td>  329237000</td>
          <td>...</td>
          <td>  71989000</td>
          <td>  686280000</td>
          <td>  1788471000</td>
          <td>  108872000</td>
          <td>  57517000</td>
          <td>  392397000</td>
          <td>   436118000</td>
          <td>  151136000</td>
          <td>  176710000</td>
          <td>  18419000</td>
        </tr>
      </tbody>
    </table>
    <p>5 rows × 50 columns</p>
    </div>
  metadata
    {
     "collapsed": false
    }
markdown
    We need a second file that provides descriptions for the tax item codes (the TXX numbers).
code 8
    !wget -O TaxItemCodesandDescriptions.xls http://www2.census.gov/govs/statetax/TaxItemCodesandDescriptions.xls
  stream stdout
    --2015-04-10 17:51:30--  http://www2.census.gov/govs/statetax/TaxItemCodesandDescriptions.xls
    Resolving www2.census.gov (www2.census.gov)... 23.62.6.66, 23.62.6.35, 2001:559:0:5e::1743:f670, ...
    Connecting to www2.census.gov (www2.census.gov)|23.62.6.66|:80... connected.
    HTTP request sent, awaiting response... 200 OK
    Length: 15872 (16K) [application/vnd.ms-excel]
    Saving to: ‘TaxItemCodesandDescriptions.xls’
    
    100%[======================================>] 15,872      --.-K/s   in 0s      
    
    2015-04-10 17:51:32 (109 MB/s) - ‘TaxItemCodesandDescriptions.xls’ saved [15872/15872]
    
  metadata
    {
     "collapsed": false
    }
code 9
    tax_codes_df = pandas.read_excel('TaxItemCodesandDescriptions.xls', 'Sheet1', index_col='Item Code')
    tax_codes_df.head()
  execute_result
  - text/plain
                                          Description
    Item Code                                        
    T01                                Property Taxes
    T09        General Sales and Gross Receipts Taxes
    T10                 Alcoholic Beverages Sales Tax
    T11                          Amusements Sales Tax
    T12                  Insurance Premiums Sales Tax
  - text/html
    <div style="max-height:1000px;max-width:1500px;overflow:auto;">
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>Description</th>
        </tr>
        <tr>
          <th>Item Code</th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>T01</th>
          <td>                         Property Taxes</td>
        </tr>
        <tr>
          <th>T09</th>
          <td> General Sales and Gross Receipts Taxes</td>
        </tr>
        <tr>
          <th>T10</th>
          <td>          Alcoholic Beverages Sales Tax</td>
        </tr>
        <tr>
          <th>T11</th>
          <td>                   Amusements Sales Tax</td>
        </tr>
        <tr>
          <th>T12</th>
          <td>           Insurance Premiums Sales Tax</td>
        </tr>
      </tbody>
    </table>
    </div>
  metadata
    {
     "collapsed": false
    }
markdown
    ## Total taxes collected
    
    The sum of taxes collected over by state and local governments for all categories in fiscal year 2013 is over **$846 billion**, with a 'b'.
  metadata
    {
     "render": true
    }
code 10
    print '${:,}'.format(df.sum().sum())
  stream stdout
    $846,214,995,000
  metadata
    {
     "collapsed": false,
     "render": true
    }
markdown
    ## Taxes by category
    
    According to the data [source](http://www.census.gov/govs/statetax/):
    
    >The Annual Survey of State Government Tax Collections (STC) provides a summary of taxes collected by state for 5 broad tax categories and up to 25 tax subcategories. These tables and data files present the details on tax collections by type of tax imposed and collected by state governments.
  metadata
    {
     "render": true
    }
markdown
    The only thing missing from the data thus far are the "5 broad tax categories", and which of the 25 subcategories make up each one.   We had to [look this up](http://www.census.gov/govs/classification/), and download another [Excel file](http://www2.census.gov/govs/estimate/methodology_for_summary_tabulations.xls).  There's also this [report](http://www2.census.gov/govs/statetax/2013stcreport.pdf), which provides some details about tax categorization, but also seems to contradict the Excel spreadsheet. Oh, the humanity.
code 11
    !wget -O agg_tax_categories.xls http://www2.census.gov/govs/estimate/methodology_for_summary_tabulations.xls
  stream stdout
    --2015-04-10 17:51:37--  http://www2.census.gov/govs/estimate/methodology_for_summary_tabulations.xls
    Resolving www2.census.gov (www2.census.gov)... 23.62.6.66, 23.62.6.35, 2001:559:0:5e::1743:f66b, ...
    Connecting to www2.census.gov (www2.census.gov)|23.62.6.66|:80... connected.
    HTTP request sent, awaiting response... 200 OK
    Length: 65024 (64K) [application/vnd.ms-excel]
    Saving to: ‘agg_tax_categories.xls’
    
    100%[======================================>] 65,024      --.-K/s   in 0.004s  
    
    2015-04-10 17:51:44 (17.7 MB/s) - ‘agg_tax_categories.xls’ saved [65024/65024]
    
  metadata
    {
     "collapsed": false
    }
code 12
    tmp = pandas.read_excel('agg_tax_categories.xls')
    tmp[8:21].dropna(how='all').dropna(how='all', axis=1).head()
  execute_result
  - text/plain
       2010 Publication Aggregates -- State & Local Government Finance  \
    8                                                   8                
    9                                                   9                
    10                                                 10                
    11                                                 11                
    12                                                 12                
    
         Unnamed: 4                Unnamed: 5           Unnamed: 6 Unnamed: 7  \
    8   Total Taxes                       NaN                  NaN        NaN   
    9           NaN              Property Tax                  NaN        NaN   
    10          NaN  Sales and Gross Receipts                  NaN        NaN   
    11          NaN                       NaN        General Sales        NaN   
    12          NaN                       NaN  Selective Sales Tax        NaN   
    
                                              Unnamed: 11  
    8   T01, T09, T10, T11, T12, T13, T14, T15, T16, T...  
    9                                                 T01  
    10        T09, T10, T11, T12, T13, T14, T15, T16, T19  
    11                                                T09  
    12             T10, T11, T12, T13, T14, T15, T16, T19  
  - text/html
    <div style="max-height:1000px;max-width:1500px;overflow:auto;">
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>2010 Publication Aggregates -- State &amp; Local Government Finance</th>
          <th>Unnamed: 4</th>
          <th>Unnamed: 5</th>
          <th>Unnamed: 6</th>
          <th>Unnamed: 7</th>
          <th>Unnamed: 11</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>8 </th>
          <td>  8</td>
          <td> Total Taxes</td>
          <td>                      NaN</td>
          <td>                 NaN</td>
          <td> NaN</td>
          <td> T01, T09, T10, T11, T12, T13, T14, T15, T16, T...</td>
        </tr>
        <tr>
          <th>9 </th>
          <td>  9</td>
          <td>         NaN</td>
          <td>             Property Tax</td>
          <td>                 NaN</td>
          <td> NaN</td>
          <td>                                               T01</td>
        </tr>
        <tr>
          <th>10</th>
          <td> 10</td>
          <td>         NaN</td>
          <td> Sales and Gross Receipts</td>
          <td>                 NaN</td>
          <td> NaN</td>
          <td>       T09, T10, T11, T12, T13, T14, T15, T16, T19</td>
        </tr>
        <tr>
          <th>11</th>
          <td> 11</td>
          <td>         NaN</td>
          <td>                      NaN</td>
          <td>       General Sales</td>
          <td> NaN</td>
          <td>                                               T09</td>
        </tr>
        <tr>
          <th>12</th>
          <td> 12</td>
          <td>         NaN</td>
          <td>                      NaN</td>
          <td> Selective Sales Tax</td>
          <td> NaN</td>
          <td>            T10, T11, T12, T13, T14, T15, T16, T19</td>
        </tr>
      </tbody>
    </table>
    </div>
  metadata
    {
     "collapsed": false
    }
markdown
    After some investigation, we can write a short function to retrieve the major tax category by tax item code.
code 13
    def category(tax_item):
        '''Return tax category for the tax item code.'''
        if tax_item == 'T01':
            return 'Property Taxes'
        elif tax_item in ['T40', 'T41']:
            return 'Income Taxes'
        elif tax_item in ['T09', 'T10', 'T11', 'T12', 'T13', 'T14', 'T15', 'T16', 'T19']:
            return 'Sales and Gross Receipts Taxes'
        elif tax_item in ['T20', 'T21', 'T22', 'T23', 'T24', 'T25', 'T26', 'T27', 'T28', 'T29']:
            return 'License Taxes'
        return 'Other Taxes'
  metadata
    {
     "collapsed": false
    }
markdown
    Sum all taxes collected by broad category.
  metadata
    {
     "render": true
    }
code 14
    # assign broad category to each tax item code
    tmp = df.copy()
    tmp['Category'] = tmp.index.map(category)
    
    # aggregate taxes collected by each state by broad category
    by_category = tmp.groupby('Category').sum()
    
    # sum across all states
    totals_by_category = by_category.sum(axis=1)
    print totals_by_category.map('${:,}'.format)
  stream stdout
    Category
    Income Taxes                      $354,658,475,000
    License Taxes                      $55,485,079,000
    Other Taxes                        $30,226,907,000
    Property Taxes                     $13,129,395,000
    Sales and Gross Receipts Taxes    $392,715,139,000
    dtype: object
  metadata
    {
     "collapsed": false,
     "render": true
    }
markdown
    Plot the total taxes collected for by broad category.
  metadata
    {
     "render": false
    }
code 15
    totals_by_category.plot(kind='pie', labels=totals_by_category.index, 
                            figsize=(10,10), autopct='%.1f%%')
  execute_result
  - text/plain
    <matplotlib.axes._subplots.AxesSubplot at 0x7f4a00294cd0>
  display_data
  - image/png
    iVBORw0KGgoAAAANSUhEUgAAAl8AAAI8CAYAAADP387pAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz
    AAALEgAACxIB0t1+/AAAIABJREFUeJzs3XeYW9WBNvD3qHdpVEd1+pzp425sYwyY5kBCJ4EQ+m42
    dZNNssum7KZsloSWBFLYtE3/NrvZsGmUEAKEhBawsY2Nr3uZXjxd0mgk3e+PGQIEMC5jXWn0/p6H
    58EalXfGIL1zzrnnCFVVQURERESFodM6ABEREVE5YfkiIiIiKiCWLyIiIqICYvkiIiIiKiCWLyIi
    IqICYvkiIiIiKiCWLyIiIqICYvkiIiIiKiCWLyIiIqICYvkiIiIiKiCWLyIiIqICYvkiIiIiKiCW
    LyIiIqICYvkiIiIiKiCWLyIiIqICYvkiIiIiKiCWLyIiIqICYvkiIiIiKiCWLyIiIqICYvkiIiIi
    KiCWLyIiIqICYvkiIiIiKiCWLyIiIqICYvkiIiIiKiCWLyIiIqICYvkiIiIiKiCWLyIiIqICYvki
    IiIiKiCWLyIiIqICYvkiIiIiKiCWLyIiIqICYvkiIiIiKiCWLyIiIqICYvkiIiIiKiCWLyIiIqIC
    YvkiIiIiKiCWLyIiIqICYvkiIiIiKiCWLyIiIqICYvkiIiIiKiCWLyIiIqICYvkiIiIiKiCWLyIi
    IqICMmgdgIiItCGlnFQUxaF1jr8mpbwewAfn/tgKYAeAHID7FUX5uGbBiOaJUFVV6wxERKQBKeWE
    oihOrXMciZRyH4CliqIc1joL0XzhyBcRUZmTUp4O4NMABgG0AXhOUZSr5762HMCXAdgBTAM4E7Oj
    UN8AsBRAFsA/KIryqJTyOgAXAbABaABwBwALgKvmHvsWRVFGpJR1AL4KIAAgCeBvFEVRjiLn/wGI
    zT3nVxRF+ZaUsgrAQwBWARgB8BiAzwD4PYAvAlgHwAzga4qifFNKGQbwUwBOzH4GvkdRlD8e1w+O
    6DhxzRcREQHAIgB/D6AFQK2UcrWU0gTgvwB8UFGURQDWA0gDeB+AnKIoHQCuBPB9KaV57nlaAVwM
    YDmAzwMYVxRlCYAnAVwzd59vAviAoijLAHwMwNePMuP1c49ZDuCDUsoKRVEOYLZkfQPARwC8oCjK
    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
    mZN4bdIByxcRkXeZALwkhKjwTDMthXvB9DCAv8K9Zmkn3IurP8azSP8uAL8QQhQDKIJ7ei0YwKue
    KcVCuNf9nDzd9SzcI2zFcJeYExeuT1SUxuGeGt0mhCiAe83YRI/rBnAv3NNmtUKIbACfhXux+0TH
    fxjuNUolcG+18BO4R9omyv8NIUSZ57F2ADtOfv0Tjy2lLIZ7u4l74B5N+oLn/ZYDuM3zsG8AuNrz
    WvkAlkkpq+AuOB94XusDfDRN+bG3C+DfhRCVcBfE5zy3/wXATiHEXringbM8U4Kvwl0mT+V49tcA
    rPNkehBAFQCDEOIhAONSyjcA/BzAhZ4TJP4bQIgQolQIUQ7gx57j3COEKPe89gq419eRDzIo5ZNn
    LxMREfkMz9miWz0nQxCdE458ERERTQ5HK2hKcOSLiIiIyIs48kVERETkRSxfRERERF7E8kVERETk
    RSxfRERERF7E8kVERETkRSxfRERERF7E8kVERETkRSxfRERERF7E8kVERETkRSxfRERERF7E8kVE
    RETkRSxfRERERF7E8kVERETkRSxfRERERF7E8kVERETkRSxfRERERF7E8kVERETkRSxfRERERF7E
    8kVERETkRSxfRERERF7E8kVERETkRSxfRERERF7E8kVERETkRSxfRERERF7E8kVERETkRSxfRERE
    RF7E8kVERETkRSxfRERERF7E8kVERETkRSxfRERERF7E8kVERETkRSxfRERERF7E8kVERETkRSxf
    RERERF7E8kVERETkRSxfRERERF70/wG7FkVJx52CEQAAAABJRU5ErkJggg==
    
  - text/plain
    <matplotlib.figure.Figure at 0x7f4a002a43d0>
  metadata
    {
     "collapsed": false,
     "render": true
    }
markdown
    Here is a [violin plot](http://stanford.edu/~mwaskom/software/seaborn/examples/elaborate_violinplot.html) (a combination of boxplot and kernel density plot) that shows the distribution of taxes collected for each category.  
    
    * The median sales and income taxes collected is below \$5 billion (each).
    * The majority of states collect less than \$10 billion each in sales and income taxes.
    * Some states collect as much as \$75 billion in income tax, and as much as \$48 billion in sales tax.  Ouch.
  metadata
    {
     "render": true
    }
code 16
    data = by_category.T
    fig, ax = plt.subplots(figsize=(14,10))
    seaborn.violinplot(data, color="Set3", bw=.2, cut=.6,
                       lw=.5, inner="box", inner_kws={"ms": 6}, ax=ax)
  execute_result
  - text/plain
    <matplotlib.axes._subplots.AxesSubplot at 0x7f49fffab210>
  display_data
  - image/png
    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
    
  - text/plain
    <matplotlib.figure.Figure at 0x7f4a002a4190>
  metadata
    {
     "collapsed": false,
     "render": true
    }
code 17
    print data[['Income Taxes', 'Sales and Gross Receipts Taxes']].describe()
  stream stdout
           Income Taxes  Sales and Gross Receipts Taxes
    count  5.000000e+01                    5.000000e+01
    mean   7.093170e+09                    7.854303e+09
    std    1.218651e+10                    9.424387e+09
    min    0.000000e+00                    2.495860e+08
    25%    1.496777e+09                    2.293244e+09
    50%    3.421451e+09                    4.749209e+09
    75%    8.580206e+09                    8.918576e+09
    max    7.427100e+10                    4.807458e+10
  metadata
    {
     "collapsed": false,
     "render": true
    }
markdown
    ## Taxes by state
    
    Sum the taxes across all categories and view the states that collect the most taxes.
  metadata
    {
     "render": true
    }
code 18
    taxes_by_state = df.sum().sort(inplace=False, ascending=False)
    taxes_by_state[:10].map('${:,}'.format)
  execute_result
  - text/plain
    CA    $133,184,246,000
    NY     $73,667,171,000
    TX     $51,714,295,000
    IL     $38,715,320,000
    FL     $34,588,478,000
    PA     $33,965,626,000
    NJ     $29,076,881,000
    OH     $27,330,948,000
    MI     $25,082,654,000
    MA     $23,901,047,000
    dtype: object
  metadata
    {
     "collapsed": false,
     "render": true
    }
markdown
    It may not surprise anyone that California and New York top the list; however, it may surprise some that California collected almost twice as much tax revenue as New York.  Here is a bar chart to help visualize the magnitude of taxes collected by state.
code 19
    fig, ax = plt.subplots(figsize=(12,8))
    data = taxes_by_state.reset_index()
    data.columns = ['State', 'Taxes']
    # plot values in $ billions
    seaborn.barplot(data.index, data.Taxes / 1000000000,
                    ci=None, hline=.1, ax=ax)
    ax.set_xticklabels(data.State)
    ax.set_ylabel('$ Billions')
    ax.set_xlabel('State')
    ax.set_title('Taxes Collected by US State and Local Governments, FY 2013')
    plt.tight_layout()
  display_data
  - image/png
    iVBORw0KGgoAAAANSUhEUgAAA1YAAAI4CAYAAABp1Xj1AAAABHNCSVQICAgIfAhkiAAAAAlwSFlz
    AAALEgAACxIB0t1+/AAAIABJREFUeJzs3XmYJVV9N/AvAoMZByczsogwAd8RTgSXoMY1iUYxGjVo
    XiOKcV+yuIGvEkXjQhIVxI1oTNxBoyguQUzciEajETUuURP05xZgUGHQGZFx1GGZ94+qlkvT23TR
    fbuZz+d55pm+devUPbdu3br1rXPq1C7bt28PAAAA83eDcVcAAABguROsAAAABhKsAAAABhKsAAAA
    BhKsAAAABhKsAAAABhKsgJ1Ga+2q1tr/6f8+tbX210upTlM894nW2uMXu047u5k+k0Wux0F9XfxW
    AywDu427AsDS01rbkmTiJnc3SvLzJFf2j/+kqk4fS8WStNbumOSFSe6S5Kok307y91V16g4uanuu
    fo/zrctjkjy+qn57yHJmMLiOSdJau0eSt1XVuknTP9FPf1Nr7VeTvCLJ76f7zH+Q5M1VddI0y3x8
    kmcm2T/J1iRfTPLQqtrSWjs1yYaqet4c6/eYLOx6vM6MrrNx1yVJWmsPS/L0JIcl+WmS/01yWlX9
    /VgrNkbX5WfUWrsq3fY98T28PMmvJ/mfJH9UVZ8cmffNSX6lqo6etIy9k/xtkt9J99367yT/r6o+
    PzLPw5O8JMlNkpyd5HFVtbl/7qgkxya5bZLPV9XvjpS7SZKzkrQkuyf5bpITqurMoe8d2HHOggHX
    UlWrqmrPqtozyflJHjDxeMyh6i5JPpbk35Ksr6qbJPnzJPed5yJ3ua7qtkyNBrdXJlmZ5Ner6sZJ
    jkwXWq+ltXb3JC9K8rB+3lsmeefCV3dJuE7C7nWhtfaMJK9KclKSfatq3yR/luRurbUVi1iPpXaS
    9rr+fG4zsv9bW1Ub04XZN7TWbpgkrbV7Jbl/kqdMUX5Vks8luV2SNUlOS/IvrbUb9WUPS/IPSf44
    yb7pgtxrR8r/KN1JjxOnWPaWJI9Lsk9VrU530umM1tqqYW8ZmI+ltjMElrC+teiUdGdsf5bkvenO
    vF7eWrtrkvcnObyqLmyt3TZdALpzVX2ztfaAJH+T5MAk5yb5s6r6Wr/cZyV5apIbJ/l+kidV1cen
    qMLJSU6tqpMnJlTVl5I8bKSOT0zyF0nWJvl0/zo/mMN7m6l+6/r3/VvpTkidnuTv0h0M7dZauyzJ
    5VW1trW2R7rQ8ZAkeyT5pyRPr6qf98s6Lt1B2VVJnj9bvZLcorX2uXTr/N+SPLaqNrfW/iXJh6rq
    NSPv4atJnldV75/Dcie7Q5K/rKpLk6SqKklNM+9vJjmnqr7Sz7s5ydv6OvxJkocn2d5aOzbJx6vq
    ga21Zyd5QpJ9kmxI8tyqOrO1dsskf59k9x1Zj6Naa+uTvCHJbdIdVH8kyZMn3ktr7bwkr07yqHSf
    74eTPLqqftE/v6OfybW01nZJ8tz+Pf5K/xpPraqf9M//VpKXpguhl6X7nE5rrd0/3Xb3f5JcmuRN
    VXXCHF5vdZITkjyyqv5pYnpV/VeSR0ya79XpTj5sTbeeXpxkRZKLk9ytqv6nn3fvdCdSfq2qfjjL
    d+K8dAf/j0hycGvtVkm+leQxSf46XUh/ZVW9uJ//hela1X6e5IFJzkvy4CR/lK415udJnlBVZ4/U
    e6IF9aokb0nygqq6qm/hfEKSc5I8PsmP0+0zPtxae1GS305y59baq5K8paqe1lp7Zbrt8ob9ezx6
    4n3PR1X9Y2vtoUn+qrX2giSvS/d5/2iKef83XQCe8IbW2suSHJLky+kC1VlV9en+vT8vyddbazeq
    qp9W1cf66U+YYtm/SP897buMXpXkh0m2zfe9AfOnxQrYEVckOSZdd5W7JLlXkiclSVV9Jt3BxWmt
    tV9J8o/pDtS/2Vo7PMmbkjwxXeB5XZKzWmu7t9ZakicnuUPf+vF76Q66rqG1tjLJnZO8Z7rKtdbu
    me6g8SFJ9kt3ADVrS8os9ds1yT+n62J1YLqub6dX1TeS/Gm6gLFnVa3tF3dikluk67Zzi37+5/ev
    c98kz0hyRLqDqiNmqdou6cLAY/v3c0W6LkVJcmqueQB92yQ3S/Ivs73faXw2yYtaa49prR08h3nv
    01p7YWvtbn0ISpJU1euTvD3JSf16eWD/1LeT/Fb/GZ+Q5B9ba/tW1dfTtbLMeT1O40Xp1tEtk6xL
    d+Z+wvZ028R9ktw8XQB7TDKvz2Q6j03y6CT3SBeSViV5Tf8aByb5YLpwvleS30jyX325LUke0bc2
    3D/Jn7fWHpjZ3SVd4JwtRL86yZ7p3vfd029P/QH5e5OMdls7Kskn+lA17XdiZP6HpQs+v5qruwrf
    Ld16vFeS5/ff7wkPSPLWdK02X07X5S3pttu/7l9jwqnpwsH6JIen2y+MBos7JvlGun3RS/u6pqqe
    m+RT6YL1nn2ouk+6sHVwv54fkq4VaK6ma9n+s3StRacn+WpVnTGXhbXWfiNdsJ1oET40yVcmnq+q
    7yb5Rbr1OCf9SZWfpVtvf1hVghWMgWAFzFlVfamqPl9VV1XV+Ulen+5gbcILk6xO8vl019hMdGf5
    kySvq6r/rKrtVfXWdAcOd0kXFvZIclhrbfequqA/sJhsTbp91kytT3+c7oz/f/UHFscnuUtr7dem
    mX+iy9BM9btjugP246rqZ1X1iz5EJpMOuPpWiyema8X7cVVtSXfdxESL2lHprls6t6q2JnnBDO9l
    on5vHZn/eUmO6l/nA0kO6VtrkuSRSd5ZVVfMsszpPDVdIHpKkv9prX2rDx3X0p9Z/7/pujb9c5If
    ttZePmmQhV0mlXlPVV3U/31GutaNO0017xzW4+T6fKeqPlZVl1fVD9N1a7z7pNn+tqou6lvXPpAu
    3CQ7/plM54+TvLyqzquqn6bb9h7WB/OHJzm7qt5VVVdW1aaR1r5PTrSc9K1B75yi7lPZK8kPq+qq
    iQmttc+01ja31ra21n6rf+2HJjm+b/k4P8nL020rSfKOXHOdPryflkz/nbhz//z2dOv0exMtf70T
    +u/IV9OFhduOPPfvVXV2VV2Z7gTJTZKc2D9+V5KDWms3bq3tmy6wPb3/zl2SrsVntK7nV9Wbqmp7
    urC2X2ttn5HnR7epbenC5S1bazeozkUzrt1r+lK/Xjf3rWBJkqr6Xrqwf0S6Lsmzaq3dOF3r7gur
    6rJ+8qp0rZWjftLXeU6q6jb9/C9M8l5dAWE8dAUE5qy1dki67jm3T9fVZ7ckX5h4vqquaK2dlu7M
    /LEjRQ9M8qjW2lNHpu2eZL+q+ve+y9gL04Wrj6Q7oJ4coDan6+ayX5JvTlPF/SbV56ettR+la+24
    YIa3Nm390h1Anj96ADuDvdOtly+OnKjfJVefxNovyX+OzD9TnSZsmDT/7kn2qqpLWmtnJHlka+2E
    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
    9aTnnpFup7ZXVW3qpx2fbnSdK5M8bZqzkgCMaK09MskTq+p3xl0XWG76azqfVlXT3VoAYM4WssXq
    LZnipp2tux/MvTPSr7+1dmi6s6mH9mVe2645uhQAk7RuCPonZ5oBI4CZVdV9hCrgurJg4aWqPpWp
    L3h+RbpuCqMemO6+MJdX1Xnpun9Md6EvwE6vdffm2Ziui+A7ZpkdAFhgizp4RetuenhhVX21XeOe
    gblZrnmh5YW5ejhYACapqo/kmkNZAwBjtGjBqu+y8px03QAnTDfyV7Jww7gCAABcpxazxWp9untp
    fKVvrTog3c0f75RuBKp1I/MekFnuO3PFFVdu3223XRempgAAAFObsnFo0YJVVX0t3R3okySttf9N
    cvuq2tRaOyvJO1prr0jXBfDgdPdkmNbmzVONAAwAALBw9t57zymnL9jgFa2105N8JskhrbUNrbXH
    Tprll139+ns4nJHufhUfSvKkiRtgAgAALHULdh+rhXbJJZctz4oDAADL1t577zllV0D3igIAABhI
    sAIAABhIsAIAABhIsAIAABhIsAIAABhIsAIAABhIsAIAABhIsAIAABhIsAIAABhIsAIAABhIsAIA
    ABhIsAIAABhIsAIAABhIsAIAABhIsAIAABhIsAIAABhIsAIAABhIsAIAABhIsAIAABhIsAIAABho
    t3FXYIht27Zlw4bzd7jcunUHZsWKFQtQIwAAYGe0rIPVhg3n55iTz8rK1fvMuczWSzfmlOOOzPr1
    By9gzQAAgJ3Jsg5WSbJy9T5ZtWb/cVcDAADYibnGCgAAYCDBCgAAYCDBCgAAYCDBCgAAYCDBCgAA
    YCDBCgAAYCDBCgAAYCDBCgAAYCDBCgAAYCDBCgAAYCDBCgAAYCDBCgAAYCDBCgAAYCDBCgAAYCDB
    CgAAYCDBCgAAYCDBCgAAYCDBCgAAYCDBCgAAYCDBCgAAYCDBCgAAYCDBCgAAYCDBCgAAYCDBCgAA
    YCDBCgAAYCDBCgAAYCDBCgAAYCDBCgAAYCDBCgAAYCDBCgAAYCDBCgAAYCDBCgAAYCDBCgAAYCDB
    CgAAYCDBCgAAYCDBCgAAYCDBCgAAYCDBCgAAYCDBCgAAYCDBCgAAYCDBCgAAYKDdFmrBrbU3J7l/
    ko1Vdet+2slJHpBkW5LvJHlsVV3aP3d8kscluTLJ06rqowtVNwAAgOvSQrZYvSXJfSdN+2iSw6rq
    tkm+meT4JGmtHZrkoUkO7cu8trWmNQ0AAFgWFiy8VNWnkmyeNO3sqrqqf/i5JAf0fz8wyelVdXlV
    nZfk20nuuFB1AwAAuC6Ns1XocUk+2P99syQXjjx3YZL9F71GAAAA87Bg11jNpLX23CTbquodM8y2
    faZlrFmzMmvXrprX669duyp7773nvMoCAABMtujBqrX2mCT3S3KvkcnfS7Ju5PEB/bRpbd68NZs2
    bZlXHTZt2pJLLrlsXmUBAICd13QNNIsarFpr901yXJK7V9XPR546K8k7WmuvSNcF8OAkn1/MugEA
    AMzXQg63fnqSuyfZq7W2IckL0o0CuCLJ2a21JDmnqp5UVee21s5Icm6SK5I8qapm7AoIAACwVCxY
    sKqqo6eY/OYZ5n9xkhcvVH0AAAAWintFAQAADCRYAQAADCRYAQAADCRYAQAADCRYAQAADCRYAQAA
    DCRYAQAADCRYAQAADCRYAQAADCRYAQAADCRYAQAADCRYAQAADCRYAQAADCRYAQAADCRYAQAADCRY
    AQAADCRYAQAADCRYAQAADCRYAQAADCRYAQAADCRYAQAADCRYAQAADCRYAQAADCRYAQAADCRYAQAA
    DCRYAQAADCRYAQAADCRYAQAADCRYAQAADCRYAQAADCRYAQAADCRYAQAADCRYAQAADCRYAQAADCRY
    AQAADCRYAQAADCRYAQAADCRYAQAADCRYAQAADCRYAQAADCRYAQAADCRYAQAADCRYAQAADCRYAQAA
    DCRYAQAADCRYAQAADCRYAQAADCRYAQAADCRYAQAADCRYAQAADCRYAQAADCRYAQAADCRYAQAADCRY
    AQAADCRYAQAADCRYAQAADCRYAQAADCRYAQAADCRYAQAADCRYAQAADCRYAQAADCRYAQAADCRYAQAA
    DLTbQi24tfbmJPdPsrGqbt1PW5vkXUkOTHJekqOq6sf9c8cneVySK5M8rao+ulB1AwAAuC4tZIvV
    W5Lcd9K0Zyc5u6oOSfKx/nFaa4cmeWiSQ/syr22taU0DAACWhQULL1X1qSSbJ00+Mslp/d+nJXlQ
    //cDk5xeVZdX1XlJvp3kjgtVNwAAgOvSYrcK7VtVF/d/X5xk3/7vmyW5cGS+C5Psv5gVAwAAmK+x
    dberqu1Jts8wy0zPAQAALBkLNnjFNC5urd20qi5qre2XZGM//XtJ1o3Md0A/bVpr1qzM2rWr5lWJ
    tWtXZe+995xXWQAAgMkWO1idleTRSU7q/z9zZPo7WmuvSNcF8OAkn59pQZs3b82mTVvmVYlNm7bk
    kksum1dZAABg5zVdA81CDrd+epK7J9mrtbYhyfOTnJjkjNba49MPt54kVXVua+2MJOcmuSLJk/qu
    ggAAAEveggWrqjp6mqeOmGb+Fyd58ULVBwAAYKG4VxQAAMBAghUAAMBAghUAAMBAghUAAMBAghUA
    AMBAghUAAMBAghUAAMBAghUAAMBAghUAAMBAghUAAMBAghUAAMBAghUAAMBAghUAAMBAghUAAMBA
    ghUAAMBAghUAAMBAghUAAMBAghUAAMBAghUAAMBAghUAAMBAghUAAMBAghUAAMBAghUAAMBAghUA
    AMBAghUAAMBAghUAAMBAghUAAMBAghUAAMBAghUAAMBAghUAAMBAghUAAMBAghUAAMBAghUAAMBA
    ghUAAMBAghUAAMBAghUAAMBAghUAAMBAghUAAMBAghUAAMBAghUAAMBAghUAAMBAghUAAMBAghUA
    AMBAghUAAMBAghUAAMBAghUAAMBAghUAAMBAghUAAMBAghUAAMBAghUAAMBAghUAAMBAghUAAMBA
    ghUAAMBAghUAAMBAghUAAMBAghUAAMBAghUAAMBAghUAAMBAghUAAMBAghUAAMBAghUAAMBAghUA
    AMBAghUAAMBAu43jRVtrxyd5RJKrknwtyWOT3CjJu5IcmOS8JEdV1Y/HUT8AAIAdsegtVq21g5I8
    McntqurWSXZN8rAkz05ydlUdkuRj/WMAAIAlbxxdAX+S5PIkK1truyVZmeT7SY5Mclo/z2lJHjSG
    ugEAAOywRQ9WVbUpycuTXJAuUP24qs5Osm9VXdzPdnGSfRe7bgAAAPMxjq6A65Mcm+SgJDdLsqq1
    9ojReapqe5Lti103AACA+RjH4BV3SPKZqvpRkrTW3pfkLkkuaq3dtKouaq3tl2TjTAtZs2Zl1q5d
    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
    QIIVAADAQIIVAADAQIIVAADAQIIVAADAQIIVAADAQIIVAADAQIIVAADAQIIVAADAQIIVAADAQIIV
    AADAQIIVAADAQIIVAADAQIIVAADAQIIVAADAQIIVAADAQIIVAADAQIIVAADAQIIVAADAQIIVAADA
    QIIVAADAQIIVAADAQIIVAADAQLuNuwLL2bZt27Jhw/k7XG7dugOzYsWKBagRAAAwDoLVABs2nJ9j
    Tj4rK1fvM+cyWy/dmFOOOzLr1x+8gDUDAAAWk2A10MrV+2TVmv3HXQ0AAGCMXGMFAAAwkGAFAAAw
    kGAFAAAwkGAFAAAwkGAFAAAwkGAFAAAwkGAFAAAwkGAFAAAwkGAFAAAwkGAFAAAwkGAFAAAwkGAF
    AAAwkGAFAAAwkGAFAAAwkGAFAAAwkGAFAAAwkGAFAAAwkGAFAAAwkGAFAAAwkGAFAAAwkGAFAAAw
    kGAFAAAwkGAFAAAwkGAFAAAwkGAFAAAwkGAFAAAwkGAFAAAwkGAFAAAwkGAFAAAwkGAFAAAwkGAF
    AAAwkGAFAAAwkGAFAAAwkGAFAAAwkGAFAAAw0G7jeuHW2q5JvpDkwqr6g9ba2iTvSnJgkvOSHFVV
    Px5X/QAAAOZqnC1WxyQ5N8n2/vGzk5xdVYck+Vj/GAAAYMkbS7BqrR2Q5H5J3phkl37ykUlO6/8+
    LcmDxlA1AACAHTauFqtXJjkuyVUj0/atqov7vy9Osu+i1woAAGAeFj1YtdYekGRjVX05V7dWXUNV
    bc/VXQQBAACWtHEMXnHXJEe21u6X5IZJbtxae1uSi1trN62qi1pr+yXZONNC1qxZmbVrV82rAmvX
    rsree++ZzZvHWx4AALh+WPRgVVXPSfKcJGmt3T3JM6vqka21lyZ5dJKT+v/PnGk5mzdvzaZNW+ZV
    h02btuSSSy4be3kAAGB5ma6BZCncx2qiy9+JSe7dWvtmknv2jwEAAJa8sd3HKkmq6pNJPtn/vSnJ
    EeOsDwAAwHyMNVjt7LZt25YNG87f4XLr1h2YFStWLECNAACA+RCsxmjDhvNzzMlnZeXqfeZcZuul
    G3PKcUdm/fqDF7BmAADAjhCsxmzl6n2yas3+464GAAAwwFIYvAIAAGBZE6wAAAAGEqwAAAAGEqwA
    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
    ALieGTr4x1RucJ0ubYDW2q5JXpPkvkkOTXJ0a+2W460VAADA7JZMsEpyxyTfrqrzquryJO9M8sAx
    1wkAAGBWu2zfvn3cdUiStNb+KMl9quqJ/eNHJLlTVT11qvmf9axnb7/iisuz+bJfZJcbzL1H4/ar
    rsiaPffIbrvtHuWVV175+ZZPssPLUH55l5+8DOWVV1555XfO8ieddOIuU82zlK6xmlfC237VVUmu
    2MH5lVdeeeWHl9/RZSi/vMtPtQzllVdeeeV3zvJTWUrB6ntJ1o08Xpfkwulmni4pAgAALLalFKy+
    kOTg1tpBSb6f5KFJjh5rjQAAAOZgyQxeUVVXJHlKko8kOTfJu6rq6+OtFQAAwOyWzOAVAAAAy9WS
    abECAABYrgQrAACAgQQrAACAgZbSqIDz1lq7aZJXJblDkh8nuTjJsVX1rdbasUlekmTfqvrJFGWv
    SvKKqnpm//iZSW6U5D+S/FVV3bWfvmu6kQv/vKo+O1L+Jkn+tX940yRXJrkkyZ7pguvtq2pza21N
    ki8muUdVXTDN+9hSVav6kRE/UFW3nuP7vzLJV0cmPSjJzZM8o6r+YAfK75bk60keXVU/a63tluQH
    Sd5YVcfPsowp12NVndBae2GSy6rq5dOUPSDJ3yW5Zbp19s9Jjktyt8nvobV2arp1894pXv/tVfXI
    /vFE3T9bVX/QWntMus/iqXMtMzLfmem2n7vsyPvuHz+qfy/b090s4e2j62GO9X5Tkt+oqq/18/x3
    kvtV1QWttY8nObGqPjqyzGOTHJLk+f2ynlJVr5ui7q9Mcl5VndI//kiSC0Zu0v3ydLc8eHWm2A7m
    WPeTk2xIsirJd5OcUFXnTKrHvklemeROSTYn2ZbkpVV1Zv/8q5L8UZJ1VTXtRaGTvj/fTfK0qnpN
    /9xrkvxnVZ02YD08brrv5BT7oJ/07+ebSX4tyaX9v0uq6vemKP+gJO9Lcsuqqtbak5M8YWSW3ZIc
    NvH8pLLT7YOS5LaZYfucpu4XJzk2yYp0n/3N0n0v31pVfzPptWf9DvXv7YQku6f7Djyvqt4/sowt
    VbWq//t+6baF7yU5o6r+oZ9+pySvT3K7qrpy8vqbZh0elDnsR0dff4rnZt32Ztl/vT/dtrhHkvdV
    1V/uYPlnjKzHv0ly+yQPrKptk5bx3HSj6F6Z5Kokf5rkS0n+Jsn/TXJZkl+k+0378BR1mGrdfT3J
    N9J9bp9N8idVNe1NXCavx9l+e6crO7INHJFkZZLXJVmdbh1+qqr+dFLZ2fZD+6bbhx7Qv5fzqur+
    k8pPdQzwb+n2rXcdmXe3dNvmbavqon7aQZm0nfW/ec9M8q1036ObJ5n43v51Vb1vDuvvMel/s6b6
    DZ3jfuvYdJ/pN0fKvSrJ96vqpTO9/5Hf7iek25/cKMnXkvzlxMBicyj7/CQHV9V3+uePTfKKJHeo
    qi9Nev8zfn9ba09Mt13fq6ouHSk31/pPuMcU5efyOzZ6+5+jq+obk+o/+vvz9f7fDdN991471W9P
    X27i+Gti//jWJK+squ2ttXvk6n3IhGdU1cdnWdauSb6d5FFVtWWmfeE0xxDPS7c/+UVm+f2aaf0l
    eW+SY/pZD0u3P7kyyYeq6jkj5ed87NhaOy/d78CmOX4HnpLue/Tf/bTjkqyvqj8bWeZU+8+Xpvs9
    /UW67/C/ptv2f7ntTGfZt1i11nZJ8k9JPl5Vt6iqOyQ5Psm+/SxHJzk73Y/LVLYl+cP+4CTpDoC3
    V9W/Jjm/tfb4fvpTk3x+NFQlSVX9qKoOr6rDk/xDug3k8Kq6RZK/T3JiP+uJSV5X04Sqkdeej60T
    dej/nT/P8rdOtz4mNrh7pwuDD57DMqZaj5ni72voP7/3pTvoOCRdIFiV5EXTlNs+zfSfJjmstXbD
    kbpfODLvfMqktfarSW6VZEVr7eZTLGPa991a+/10O5V7V9Vtktw53c5ph+rQP37uyOPR505P8rBJ
    y3xoknckeUiSD2f62xZ8OsnEiYMbJLlJkkNHnr9LuhMM020Hc1nnp1fV7frP9sQk72ut/frEAvrP
    /8wkn6iq9f3392HpDoIm6nVkupFC7z7N+5gwul42Jnlaa233KZ6bbC7r4TPTFZ5mH3Rskt/r9wtn
    JXlm/x27VqjqHZ3ugProJKmqvxv9Tif5QJJ/nByq+nmn2wcdnpm/l9PV/dnpflDen+TFVfXr6QLa
    XVtrT5r08jNuA62126Y7KDmyqg5N91m+rLU2+gM/Me+9kpyS5L7ptoHjWmt79Z/Jq9Od1JoyVE21
    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
    AAAAAElFTkSuQmCC
    
  - text/plain
    <matplotlib.figure.Figure at 0x7f49ffdf31d0>
  metadata
    {
     "collapsed": false,
     "render": true
    }
markdown
    ## Let's map our data
    We want to overlay our tax data over a map of the United States.  To do this, we'll use the following:
    
    1. A [TopoJSON](https://github.com/mbostock/topojson/wiki) file that contains geographic borders of US states (and counties).
    2. [US FIPS codes](http://en.wikipedia.org/wiki/Federal_Information_Processing_Standard_state_code) from the US Census bureau ([data file](http://www2.census.gov/geo/docs/reference/state.txt)).  We'll use these to bind our data set to the state geometries in our TopoJSON file.
    3. The [folium](https://github.com/python-visualization/folium) Python library to do the heavy lifting of rendering our map.
markdown
    ### Tax Data
    
    Combine the data for the 25 tax subcategories with the cumulative amounts for the 5 broad categories.  This will allow us to map both sets.
code 20
    # the aggregate data by broad category
    tmp = by_category.T
    
    # make up our own tax item codes for broad categories
    codes = ['I','L','O','P','S']
    
    # create complete list of category names
    category_names = tax_codes_df.Description.append(
        pandas.Series(tmp.columns, index=codes)
    )
    
    # merge broad category data with data for 25 subcategories
    tmp.columns = codes
    data = df.T.merge(tmp, left_index=True, right_index=True)
    data.head()
  execute_result
  - text/plain
               T01          T09        T10       T11         T12         T13  \
    AL   322300000   2331676000  173252000     93000   297958000   530244000   
    AK    99598000            0   39194000   8427000    60236000    41608000   
    AZ   762651000   6472777000   68684000    531000   424369000   781426000   
    AR  1022066000   2837788000   50656000  36109000   162962000   455914000   
    CA  1982208000  33915885000  357000000         0  2242379000  5492850000   
    
             T14        T15        T16         T19     ...              T41  \
    AL   1557000  737619000  120110000   514866000     ...        382202000   
    AK         0    4295000   69175000    26651000     ...        630941000   
    AZ    234000   21013000  315428000   122246000     ...        662026000   
    AR   3113000          0  237328000   235333000     ...        402874000   
    CA  14088000  676997000  868703000  4506678000     ...       7462000000   
    
          T50       T51         T53       T99            I           L  \
    AL  18000  42155000   119424000         0   3584722000   490475000   
    AK      0         0  4016966000         0    630941000   135720000   
    AZ      0         0    29829000         0   4059733000   412769000   
    AR  92000  30190000    80862000  24623000   3052451000   356920000   
    CA      0         0    37732000  74978000  74271000000  8743748000   
    
                 O           P            S  
    AL   161597000   322300000   4707375000  
    AK  4016966000    99598000    249586000  
    AZ    29829000   762651000   8206708000  
    AR   135767000  1022066000   4019203000  
    CA   112710000  1982208000  48074580000  
    
    [5 rows x 30 columns]
  - text/html
    <div style="max-height:1000px;max-width:1500px;overflow:auto;">
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>T01</th>
          <th>T09</th>
          <th>T10</th>
          <th>T11</th>
          <th>T12</th>
          <th>T13</th>
          <th>T14</th>
          <th>T15</th>
          <th>T16</th>
          <th>T19</th>
          <th>...</th>
          <th>T41</th>
          <th>T50</th>
          <th>T51</th>
          <th>T53</th>
          <th>T99</th>
          <th>I</th>
          <th>L</th>
          <th>O</th>
          <th>P</th>
          <th>S</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>AL</th>
          <td>  322300000</td>
          <td>  2331676000</td>
          <td> 173252000</td>
          <td>    93000</td>
          <td>  297958000</td>
          <td>  530244000</td>
          <td>  1557000</td>
          <td> 737619000</td>
          <td> 120110000</td>
          <td>  514866000</td>
          <td>...</td>
          <td>  382202000</td>
          <td> 18000</td>
          <td> 42155000</td>
          <td>  119424000</td>
          <td>        0</td>
          <td>  3584722000</td>
          <td>  490475000</td>
          <td>  161597000</td>
          <td>  322300000</td>
          <td>  4707375000</td>
        </tr>
        <tr>
          <th>AK</th>
          <td>   99598000</td>
          <td>           0</td>
          <td>  39194000</td>
          <td>  8427000</td>
          <td>   60236000</td>
          <td>   41608000</td>
          <td>        0</td>
          <td>   4295000</td>
          <td>  69175000</td>
          <td>   26651000</td>
          <td>...</td>
          <td>  630941000</td>
          <td>     0</td>
          <td>        0</td>
          <td> 4016966000</td>
          <td>        0</td>
          <td>   630941000</td>
          <td>  135720000</td>
          <td> 4016966000</td>
          <td>   99598000</td>
          <td>   249586000</td>
        </tr>
        <tr>
          <th>AZ</th>
          <td>  762651000</td>
          <td>  6472777000</td>
          <td>  68684000</td>
          <td>   531000</td>
          <td>  424369000</td>
          <td>  781426000</td>
          <td>   234000</td>
          <td>  21013000</td>
          <td> 315428000</td>
          <td>  122246000</td>
          <td>...</td>
          <td>  662026000</td>
          <td>     0</td>
          <td>        0</td>
          <td>   29829000</td>
          <td>        0</td>
          <td>  4059733000</td>
          <td>  412769000</td>
          <td>   29829000</td>
          <td>  762651000</td>
          <td>  8206708000</td>
        </tr>
        <tr>
          <th>AR</th>
          <td> 1022066000</td>
          <td>  2837788000</td>
          <td>  50656000</td>
          <td> 36109000</td>
          <td>  162962000</td>
          <td>  455914000</td>
          <td>  3113000</td>
          <td>         0</td>
          <td> 237328000</td>
          <td>  235333000</td>
          <td>...</td>
          <td>  402874000</td>
          <td> 92000</td>
          <td> 30190000</td>
          <td>   80862000</td>
          <td> 24623000</td>
          <td>  3052451000</td>
          <td>  356920000</td>
          <td>  135767000</td>
          <td> 1022066000</td>
          <td>  4019203000</td>
        </tr>
        <tr>
          <th>CA</th>
          <td> 1982208000</td>
          <td> 33915885000</td>
          <td> 357000000</td>
          <td>        0</td>
          <td> 2242379000</td>
          <td> 5492850000</td>
          <td> 14088000</td>
          <td> 676997000</td>
          <td> 868703000</td>
          <td> 4506678000</td>
          <td>...</td>
          <td> 7462000000</td>
          <td>     0</td>
          <td>        0</td>
          <td>   37732000</td>
          <td> 74978000</td>
          <td> 74271000000</td>
          <td> 8743748000</td>
          <td>  112710000</td>
          <td> 1982208000</td>
          <td> 48074580000</td>
        </tr>
      </tbody>
    </table>
    <p>5 rows × 30 columns</p>
    </div>
  metadata
    {
     "collapsed": false
    }
markdown
    ### TopoJSON File
    
    We created a TopoJSON file of US borders using [us-atlas](https://github.com/mbostock/us-atlas).  Creation of this file is beyond our scope here, but you can download it from our GitHub repository.
code 21
    !wget -O us-states-10m.json https://raw.githubusercontent.com/knowledgeanyhow/notebooks/master/tax-maps/data/us-states-10m.json
  stream stdout
    --2015-04-10 17:52:17--  https://raw.githubusercontent.com/knowledgeanyhow/notebooks/master/tax-maps/data/us-states-10m.json
    Resolving raw.githubusercontent.com (raw.githubusercontent.com)... 199.27.75.133
    Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|199.27.75.133|:443... connected.
    HTTP request sent, awaiting response... 200 OK
    Length: 651048 (636K) [text/plain]
    Saving to: ‘us-states-10m.json’
    
    100%[======================================>] 651,048     1.77MB/s   in 0.4s   
    
    2015-04-10 17:52:22 (1.77 MB/s) - ‘us-states-10m.json’ saved [651048/651048]
    
  metadata
    {
     "collapsed": false
    }
code 22
    us_topo_map = 'us-states-10m.json'
    
    import os
    assert os.path.isfile(us_topo_map)
    statinfo = os.stat(us_topo_map)
    assert statinfo.st_size > 0
  metadata
    {
     "collapsed": false
    }
markdown
    ### U.S. FIPS Codes
    
    Our tax data is indexed by state.  We need a way to bind our data to the state geometries in our map.  The geometries in our TopoJSON file are keyed by FIPS codes (Federal Information Processing Standard).  So we need to obtain the FIPS codes for US states (from the US Census Bureau), and add them to our data.
code 23
    !wget -O us_state_FIPS.txt http://www2.census.gov/geo/docs/reference/state.txt
  stream stdout
    --2015-04-10 17:52:26--  http://www2.census.gov/geo/docs/reference/state.txt
    Resolving www2.census.gov (www2.census.gov)... 23.62.6.66, 23.62.6.35, 2001:559:0:5e::1743:f66b, ...
    Connecting to www2.census.gov (www2.census.gov)|23.62.6.66|:80... connected.
    HTTP request sent, awaiting response... 200 OK
    Length: 1485 (1.5K) [text/plain]
    Saving to: ‘us_state_FIPS.txt’
    
    100%[======================================>] 1,485       --.-K/s   in 0s      
    
    2015-04-10 17:52:27 (7.11 MB/s) - ‘us_state_FIPS.txt’ saved [1485/1485]
    
  metadata
    {
     "collapsed": false
    }
code 24
    fips = pandas.read_csv('us_state_FIPS.txt', delimiter='|', index_col='STUSAB')
    fips.head()
  execute_result
  - text/plain
            STATE  STATE_NAME  STATENS
    STUSAB                            
    AL          1     Alabama  1779775
    AK          2      Alaska  1785533
    AZ          4     Arizona  1779777
    AR          5    Arkansas    68085
    CA          6  California  1779778
  - text/html
    <div style="max-height:1000px;max-width:1500px;overflow:auto;">
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>STATE</th>
          <th>STATE_NAME</th>
          <th>STATENS</th>
        </tr>
        <tr>
          <th>STUSAB</th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>AL</th>
          <td> 1</td>
          <td>    Alabama</td>
          <td> 1779775</td>
        </tr>
        <tr>
          <th>AK</th>
          <td> 2</td>
          <td>     Alaska</td>
          <td> 1785533</td>
        </tr>
        <tr>
          <th>AZ</th>
          <td> 4</td>
          <td>    Arizona</td>
          <td> 1779777</td>
        </tr>
        <tr>
          <th>AR</th>
          <td> 5</td>
          <td>   Arkansas</td>
          <td>   68085</td>
        </tr>
        <tr>
          <th>CA</th>
          <td> 6</td>
          <td> California</td>
          <td> 1779778</td>
        </tr>
      </tbody>
    </table>
    </div>
  metadata
    {
     "collapsed": false
    }
markdown
    Add FIPS column to our data.
code 25
    data['FIPS'] = data.index.map(lambda x: fips.loc[x]['STATE'])
    data['FIPS'].head()
  execute_result
  - text/plain
    AL    1
    AK    2
    AZ    4
    AR    5
    CA    6
    Name: FIPS, dtype: int64
  metadata
    {
     "collapsed": false
    }
markdown
    ### Folium
    
    Folium utilizes IPython's rich display to render maps as HTML.  Here are two functions that use different mechanisms to render a map in a notebook.  Either will work in modern browsers.
    
    <div class="alert alert-block alert-warning" style="margin-top: 20px">As of this writing, folium==0.1.3 has a <a href="https://github.com/python-visualization/folium/issues/83">defect</a> that prevents some browsers from rendering maps within a notebook if the notebook server is running over https.  The issue is caused by folium hardcoding http as the protocol to external CSS and JavaScript dependencies.  If your browser prevents loading mixed content, the map may fail to display.  Chrome users can opt for more lax security using <a href="https://support.google.com/chrome/answer/1342714?hl=en">this workaround</a>. 
    </div>
    
    <div class="alert alert-block alert-info" style="margin-top: 20px">The maps below may not render in <a href="http://nbviewer.ipython.org/">nbviewer</a> because they embed JavaScript.
    </div>
code 26
    import folium
    from IPython.display import HTML
    
    def inline_map(map):
        """
        Embeds the HTML source of the map directly into the IPython notebook.
        
        This method will not work if the map depends on any files (json data). Also this uses
        the HTML5 srcdoc attribute, which may not be supported in all browsers.
        """
        map._build_map()
        return HTML('<iframe srcdoc="{srcdoc}" style="width: 100%; height: 510px; border: none"></iframe>'.format(srcdoc=map.HTML.replace('"', '&quot;')))
    
    def embed_map(map, path="map.html"):
        """
        Embeds a linked iframe to the map into the IPython notebook.
        
        Note: this method will not capture the source of the map into the notebook.
        This method should work for all maps (as long as they use relative urls).
        """
        map.create_map(path=path)
        return HTML('<iframe src="files/{path}" style="width: 100%; height: 510px; border: none"></iframe>'.format(path=path))
  metadata
    {
     "collapsed": false
    }
markdown
    Now we create a function that accepts a tax code, creates a basemap of the United States, and adds a TopoJSON overlay with the appropriate state tax data bound to it.
code 27
    def create_tax_map(tax_code, path='tax_map.html'):
        '''
        Create a base map with tax data bound to a GeoJSON overlay.
        '''
        # lookup tax category name
        tax_name = category_names.loc[tax_code] + ' ($ Millions)'
        
        # lookup tax data
        d = data[['FIPS',tax_code]].copy()
        d[tax_code] = d[tax_code] / 1000000L
    
        # compute a color scale based on data values
        max = d[tax_code].max()
        color_scale = [max*q for q in [0, 0.1, 0.25, 0.5, 0.75, 0.95]]
        
        # create base map
        map = folium.Map(location=[40, -99], zoom_start=4, width=800)
        
        # add TopoJSON overlay and bind data
        map.geo_json(geo_path=us_topo_map, data_out='tax_map.json', 
                     data=d, columns=d.columns,
                     key_on='feature.id',
                     threshold_scale=color_scale,
                     fill_color='PuBuGn', line_opacity=0.3,
                     legend_name=tax_name,
                     topojson='objects.states')
        map.create_map(path=path)
        return map
    
    inline_map(create_tax_map('T40'))
  execute_result
  - text/plain
    <IPython.core.display.HTML object>
  - text/html
    <iframe srcdoc="<!DOCTYPE html>
    <head>
       <meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=UTF-8&quot; />
       <link rel=&quot;stylesheet&quot; href=&quot;http://cdn.leafletjs.com/leaflet-0.7/leaflet.css&quot; />
       <script src=&quot;http://cdn.leafletjs.com/leaflet-0.7/leaflet.js&quot;></script>
       <script src=&quot;http://d3js.org/d3.v3.min.js&quot; charset=&quot;utf-8&quot;></script>
       <script src=&quot;http://d3js.org/queue.v1.min.js&quot;></script>
    
       
       <script src=&quot;http://d3js.org/topojson.v1.min.js&quot;></script>
       
       
    
       <style>
    
          html, body {
            width: 100%;
            height: 100%;
            margin: 0;
            padding: 0;
          }
    
          .legend {
              padding: 0px 0px;
              font: 10px sans-serif;
              background: white;
              background: rgba(255,255,255,0.8);
              box-shadow: 0 0 15px rgba(0,0,0,0.2);
              border-radius: 5px;
          }
    
          .key path {
            display: none;
          }
    
       </style>
    </head>
    
    <body>
    
       <div id=&quot;map&quot; style=&quot;width: 800px; height: 500px&quot;></div>
    
       <script>
    
          queue()
              .defer(d3.json, 'tax_map.json')
              .defer(d3.json, 'us-states-10m.json')
              .await(makeMap)
    
          function makeMap(error, data_1,tjson_1) {
    
              
              topo_1 = topojson.feature(tjson_1, tjson_1.objects.states);
              
    
              
    
              function matchKey(datapoint, key_variable){
                  if (typeof key_variable[0][datapoint] === 'undefined') {
                      return null;
                  }
                  else {
                      return parseFloat(key_variable[0][datapoint]);
                  };
              };
    
              
              var color = d3.scale.threshold()
                  .domain([0.0, 6680.9000000000005, 16702.25, 33404.5, 50106.75, 63468.549999999996])
                  .range(['#F6EFF7', '#D0D1E6', '#A6BDDB', '#67A9CF', '#3690C0', '#02818A', '#016450']);
              
    
              var map = L.map('map').setView([40, -99], 4);
    
              L.tileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                  maxZoom: 18,
                  attribution: 'Map data (c) <a href=&quot;http://openstreetmap.org&quot;>OpenStreetMap</a> contributors'
              }).addTo(map);
    
              
    
              
    
              
    
              
    
              
              function style_1(feature) {
        return {
            fillColor: color(matchKey(feature.id, data_1)),
            weight: 1,
            opacity: 0.3,
            color: 'black',
            fillOpacity: 0.6
        };
    }
              
    
              
              gJson_layer_1 = L.geoJson(topo_1, {style: style_1}).addTo(map)
              
    
              
                  var legend = L.control({position: 'topright'});
    
        legend.onAdd = function (map) {var div = L.DomUtil.create('div', 'legend'); return div};
    
        legend.addTo(map);
    
        var x = d3.scale.linear()
        .domain([0, 69815])
        .range([0, 400]);
    
        var xAxis = d3.svg.axis()
            .scale(x)
            .orient(&quot;top&quot;)
            .tickSize(1)
            .tickValues([0.0, 6680.9000000000005, 16702.25, 33404.5, 50106.75, 63468.549999999996]);
    
        var svg = d3.select(&quot;.legend.leaflet-control&quot;).append(&quot;svg&quot;)
            .attr(&quot;id&quot;, 'legend')
            .attr(&quot;width&quot;, 450)
            .attr(&quot;height&quot;, 40);
    
        var g = svg.append(&quot;g&quot;)
            .attr(&quot;class&quot;, &quot;key&quot;)
            .attr(&quot;transform&quot;, &quot;translate(25,16)&quot;);
    
        g.selectAll(&quot;rect&quot;)
            .data(color.range().map(function(d, i) {
              return {
                x0: i ? x(color.domain()[i - 1]) : x.range()[0],
                x1: i < color.domain().length ? x(color.domain()[i]) : x.range()[1],
                z: d
              };
            }))
          .enter().append(&quot;rect&quot;)
            .attr(&quot;height&quot;, 10)
            .attr(&quot;x&quot;, function(d) { return d.x0; })
            .attr(&quot;width&quot;, function(d) { return d.x1 - d.x0; })
            .style(&quot;fill&quot;, function(d) { return d.z; });
    
        g.call(xAxis).append(&quot;text&quot;)
            .attr(&quot;class&quot;, &quot;caption&quot;)
            .attr(&quot;y&quot;, 21)
            .text('Individual Income Taxes ($ Millions)');
              
    
          };
    
       </script>
    </body>" style="width: 100%; height: 510px; border: none"></iframe>
  metadata
    {
     "collapsed": false
    }
markdown
    ### Add a widget
  metadata
    {
     "render": false
    }
markdown
    Use a widget to choose the tax category and render the map interactively.
code 28
    from IPython.html import widgets
    from IPython.display import display
    from IPython.html.widgets import interact
    
    tax_categories = category_names.to_dict()
    tax_categories = dict(zip(tax_categories.values(), tax_categories.keys()))
    dropdown = widgets.Dropdown(options=tax_categories, value='T40', description='Tax:')
    
    def show_map(tax_code):
        display(inline_map(create_tax_map(tax_code)))
    
    widgets.interact(show_map, tax_code=dropdown)
  display_data
  - text/plain
    <IPython.core.display.HTML object>
  - text/html
    <iframe srcdoc="<!DOCTYPE html>
    <head>
       <meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=UTF-8&quot; />
       <link rel=&quot;stylesheet&quot; href=&quot;http://cdn.leafletjs.com/leaflet-0.7/leaflet.css&quot; />
       <script src=&quot;http://cdn.leafletjs.com/leaflet-0.7/leaflet.js&quot;></script>
       <script src=&quot;http://d3js.org/d3.v3.min.js&quot; charset=&quot;utf-8&quot;></script>
       <script src=&quot;http://d3js.org/queue.v1.min.js&quot;></script>
    
       
       <script src=&quot;http://d3js.org/topojson.v1.min.js&quot;></script>
       
       
    
       <style>
    
          html, body {
            width: 100%;
            height: 100%;
            margin: 0;
            padding: 0;
          }
    
          .legend {
              padding: 0px 0px;
              font: 10px sans-serif;
              background: white;
              background: rgba(255,255,255,0.8);
              box-shadow: 0 0 15px rgba(0,0,0,0.2);
              border-radius: 5px;
          }
    
          .key path {
            display: none;
          }
    
       </style>
    </head>
    
    <body>
    
       <div id=&quot;map&quot; style=&quot;width: 800px; height: 500px&quot;></div>
    
       <script>
    
          queue()
              .defer(d3.json, 'tax_map.json')
              .defer(d3.json, 'us-states-10m.json')
              .await(makeMap)
    
          function makeMap(error, data_1,tjson_1) {
    
              
              topo_1 = topojson.feature(tjson_1, tjson_1.objects.states);
              
    
              
    
              function matchKey(datapoint, key_variable){
                  if (typeof key_variable[0][datapoint] === 'undefined') {
                      return null;
                  }
                  else {
                      return parseFloat(key_variable[0][datapoint]);
                  };
              };
    
              
              var color = d3.scale.threshold()
                  .domain([0.0, 6680.9000000000005, 16702.25, 33404.5, 50106.75, 63468.549999999996])
                  .range(['#F6EFF7', '#D0D1E6', '#A6BDDB', '#67A9CF', '#3690C0', '#02818A', '#016450']);
              
    
              var map = L.map('map').setView([40, -99], 4);
    
              L.tileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                  maxZoom: 18,
                  attribution: 'Map data (c) <a href=&quot;http://openstreetmap.org&quot;>OpenStreetMap</a> contributors'
              }).addTo(map);
    
              
    
              
    
              
    
              
    
              
              function style_1(feature) {
        return {
            fillColor: color(matchKey(feature.id, data_1)),
            weight: 1,
            opacity: 0.3,
            color: 'black',
            fillOpacity: 0.6
        };
    }
              
    
              
              gJson_layer_1 = L.geoJson(topo_1, {style: style_1}).addTo(map)
              
    
              
                  var legend = L.control({position: 'topright'});
    
        legend.onAdd = function (map) {var div = L.DomUtil.create('div', 'legend'); return div};
    
        legend.addTo(map);
    
        var x = d3.scale.linear()
        .domain([0, 69815])
        .range([0, 400]);
    
        var xAxis = d3.svg.axis()
            .scale(x)
            .orient(&quot;top&quot;)
            .tickSize(1)
            .tickValues([0.0, 6680.9000000000005, 16702.25, 33404.5, 50106.75, 63468.549999999996]);
    
        var svg = d3.select(&quot;.legend.leaflet-control&quot;).append(&quot;svg&quot;)
            .attr(&quot;id&quot;, 'legend')
            .attr(&quot;width&quot;, 450)
            .attr(&quot;height&quot;, 40);
    
        var g = svg.append(&quot;g&quot;)
            .attr(&quot;class&quot;, &quot;key&quot;)
            .attr(&quot;transform&quot;, &quot;translate(25,16)&quot;);
    
        g.selectAll(&quot;rect&quot;)
            .data(color.range().map(function(d, i) {
              return {
                x0: i ? x(color.domain()[i - 1]) : x.range()[0],
                x1: i < color.domain().length ? x(color.domain()[i]) : x.range()[1],
                z: d
              };
            }))
          .enter().append(&quot;rect&quot;)
            .attr(&quot;height&quot;, 10)
            .attr(&quot;x&quot;, function(d) { return d.x0; })
            .attr(&quot;width&quot;, function(d) { return d.x1 - d.x0; })
            .style(&quot;fill&quot;, function(d) { return d.z; });
    
        g.call(xAxis).append(&quot;text&quot;)
            .attr(&quot;class&quot;, &quot;caption&quot;)
            .attr(&quot;y&quot;, 21)
            .text('Individual Income Taxes ($ Millions)');
              
    
          };
    
       </script>
    </body>" style="width: 100%; height: 510px; border: none"></iframe>
  execute_result
  - text/plain
    <function __main__.show_map>
  metadata
    {
     "collapsed": false,
     "render": true
    }
markdown
    <div class="alert" style="border: 1px solid #aaa; background: radial-gradient(ellipse at center, #ffffff 50%, #eee 100%);">
    <div class="row">
        <div class="col-sm-1"><img src="https://knowledgeanyhow.org/static/images/favicon_32x32.png" style="margin-top: -6px"/></div>
        <div class="col-sm-11">This notebook was created using <a href="https://knowledgeanyhow.org">IBM Knowledge Anyhow Workbench</a>.  To learn more, visit us at <a href="https://knowledgeanyhow.org">https://knowledgeanyhow.org</a>.</div>
        </div>
    </div>
  metadata
    {
     "collapsed": true
    }
metadata
    {
     "kernelspec": {
      "display_name": "Python 2",
      "language": "python",
      "name": "python2"
     },
     "language_info": {
      "codemirror_mode": {
       "name": "ipython",
       "version": 2
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython2",
      "version": "2.7.6"
     }
    }
