nbformat 4
nbformat_minor 0
markdown
    # Population Growth Estimates
  metadata
    {
     "render": true
    }
markdown
    ## Objective 
    
    Provide an introductory analysis into the growth rates within Senegal due to migration trends.
    
    > [Senegal](http://en.wikipedia.org/wiki/Senegal) has a population of over 13.5 million,[36] about 42 percent of whom live in rural areas. Density in these areas varies from about 77 inhabitants per square kilometre (200/sq mi) in the west-central region to 2 per square kilometre (5.2/sq mi) in the arid eastern section.
    
    ## Data Access
    
    ### Available Data
    The [2012 Revision of the World Population Prospects](http://esa.un.org/unpd/wpp/unpp/panel_indicators.htm) provides global demographic estimates and projections. This data is publicly available by the Population Division of the United Nations Department of Economic and Social Affairs of the United Nations Secretariat. The world population prospects are used widely throughout the United Nations and by many international organizations, research centers, academic researchers and the media.
    
    ### Load Data
    Use the [UN World Population Prospects Service](http://esa.un.org/unpd/wpp/unpp/panel_indicators.htm) to download a csv file. We are initially interested in a data file for Senegal with the following variables:
    
    * population growth rate
    * net migration rate
    * net migration
    
    Once you've downloaded the data, upload it to your workbench.
markdown
    <div class="alert" style="border: 1px solid #aaa; background: radial-gradient(ellipse at center, #ffffff 50%, #eee 100%);">
    <div class="row">
        <div class="col-sm-1"><img src="https://knowledgeanyhow.org/static/images/favicon_32x32.png" style="margin-top: -6px"/></div>
        <div class="col-sm-11">In IBM Knowledge Anyhow Workbench, you can drag/drop the file on your workbench browser tab to simplify the uploading process.</div>
    </div>
    </div>
markdown
    ## Data Exploration
markdown
    Import the data into a dataframe so you can easily explore it.
  metadata
    {
     "render": true
    }
code 2
    import pandas as pd
    df_pop_density = pd.read_csv('/resources/senegal_growth_migration.csv')
    df_pop_density.head(5)
  execute_result
  - text/plain
       Country                    Variable         Variant       Year  Value
    0  Senegal  Population growth rate (%)  Medium variant  1950-1955   2.33
    1  Senegal  Population growth rate (%)  Medium variant  1955-1960   2.66
    2  Senegal  Population growth rate (%)  Medium variant  1960-1965   2.77
    3  Senegal  Population growth rate (%)  Medium variant  1965-1970   2.90
    4  Senegal  Population growth rate (%)  Medium variant  1970-1975   3.00
    
    [5 rows x 5 columns]
  - text/html
    <div style="max-height:1000px;max-width:1500px;overflow:auto;">
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>Country</th>
          <th>Variable</th>
          <th>Variant</th>
          <th>Year</th>
          <th>Value</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td> Senegal</td>
          <td> Population growth rate (%)</td>
          <td> Medium variant</td>
          <td> 1950-1955</td>
          <td> 2.33</td>
        </tr>
        <tr>
          <th>1</th>
          <td> Senegal</td>
          <td> Population growth rate (%)</td>
          <td> Medium variant</td>
          <td> 1955-1960</td>
          <td> 2.66</td>
        </tr>
        <tr>
          <th>2</th>
          <td> Senegal</td>
          <td> Population growth rate (%)</td>
          <td> Medium variant</td>
          <td> 1960-1965</td>
          <td> 2.77</td>
        </tr>
        <tr>
          <th>3</th>
          <td> Senegal</td>
          <td> Population growth rate (%)</td>
          <td> Medium variant</td>
          <td> 1965-1970</td>
          <td> 2.90</td>
        </tr>
        <tr>
          <th>4</th>
          <td> Senegal</td>
          <td> Population growth rate (%)</td>
          <td> Medium variant</td>
          <td> 1970-1975</td>
          <td> 3.00</td>
        </tr>
      </tbody>
    </table>
    <p>5 rows Ã— 5 columns</p>
    </div>
  metadata
    {
     "collapsed": false
    }
markdown
    We are not interested in the ```Variant``` field and we know our data is limited to the country of ```Senegal```. So let us filter the data.
code 3
    filtered_df = df_pop_density[['Variable','Year','Value']].dropna(how="any")
    filtered_df
  execute_result
  - text/plain
                                                 Variable       Year  Value
    0                          Population growth rate (%)  1950-1955   2.33
    1                          Population growth rate (%)  1955-1960   2.66
    2                          Population growth rate (%)  1960-1965   2.77
    3                          Population growth rate (%)  1965-1970   2.90
    4                          Population growth rate (%)  1970-1975   3.00
    5                          Population growth rate (%)  1975-1980   2.56
    6                          Population growth rate (%)  1980-1985   2.90
    7                          Population growth rate (%)  1985-1990   3.09
    8                          Population growth rate (%)  1990-1995   2.96
    9                          Population growth rate (%)  1995-2000   2.48
    10                         Population growth rate (%)  2000-2005   2.67
    11                         Population growth rate (%)  2005-2010   2.78
    12                         Population growth rate (%)  2010-2015   2.90
    13          Net migration rate (per 1,000 population)  1950-1955   2.50
    14          Net migration rate (per 1,000 population)  1955-1960   3.00
    15          Net migration rate (per 1,000 population)  1960-1965   2.90
    16          Net migration rate (per 1,000 population)  1965-1970   4.40
    17          Net migration rate (per 1,000 population)  1970-1975   2.90
    18          Net migration rate (per 1,000 population)  1975-1980  -5.10
    19          Net migration rate (per 1,000 population)  1980-1985  -2.80
    20          Net migration rate (per 1,000 population)  1985-1990  -1.70
    21          Net migration rate (per 1,000 population)  1990-1995  -1.70
    22          Net migration rate (per 1,000 population)  1995-2000  -4.50
    23          Net migration rate (per 1,000 population)  2000-2005  -2.90
    24          Net migration rate (per 1,000 population)  2005-2010  -2.70
    25          Net migration rate (per 1,000 population)  2010-2015  -1.40
    26  Net migration (per year), both sexes combined ...  1950-1955   7.00
    27  Net migration (per year), both sexes combined ...  1955-1960   9.00
    28  Net migration (per year), both sexes combined ...  1960-1965  10.00
    29  Net migration (per year), both sexes combined ...  1965-1970  17.00
    30  Net migration (per year), both sexes combined ...  1970-1975  13.00
    31  Net migration (per year), both sexes combined ...  1975-1980 -27.00
    32  Net migration (per year), both sexes combined ...  1980-1985 -17.00
    33  Net migration (per year), both sexes combined ...  1985-1990 -12.00
    34  Net migration (per year), both sexes combined ...  1990-1995 -14.00
    35  Net migration (per year), both sexes combined ...  1995-2000 -42.00
    36  Net migration (per year), both sexes combined ...  2000-2005 -30.00
    37  Net migration (per year), both sexes combined ...  2005-2010 -33.00
    38  Net migration (per year), both sexes combined ...  2010-2015 -20.00
    
    [39 rows x 3 columns]
  - text/html
    <div style="max-height:1000px;max-width:1500px;overflow:auto;">
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>Variable</th>
          <th>Year</th>
          <th>Value</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0 </th>
          <td>                        Population growth rate (%)</td>
          <td> 1950-1955</td>
          <td>  2.33</td>
        </tr>
        <tr>
          <th>1 </th>
          <td>                        Population growth rate (%)</td>
          <td> 1955-1960</td>
          <td>  2.66</td>
        </tr>
        <tr>
          <th>2 </th>
          <td>                        Population growth rate (%)</td>
          <td> 1960-1965</td>
          <td>  2.77</td>
        </tr>
        <tr>
          <th>3 </th>
          <td>                        Population growth rate (%)</td>
          <td> 1965-1970</td>
          <td>  2.90</td>
        </tr>
        <tr>
          <th>4 </th>
          <td>                        Population growth rate (%)</td>
          <td> 1970-1975</td>
          <td>  3.00</td>
        </tr>
        <tr>
          <th>5 </th>
          <td>                        Population growth rate (%)</td>
          <td> 1975-1980</td>
          <td>  2.56</td>
        </tr>
        <tr>
          <th>6 </th>
          <td>                        Population growth rate (%)</td>
          <td> 1980-1985</td>
          <td>  2.90</td>
        </tr>
        <tr>
          <th>7 </th>
          <td>                        Population growth rate (%)</td>
          <td> 1985-1990</td>
          <td>  3.09</td>
        </tr>
        <tr>
          <th>8 </th>
          <td>                        Population growth rate (%)</td>
          <td> 1990-1995</td>
          <td>  2.96</td>
        </tr>
        <tr>
          <th>9 </th>
          <td>                        Population growth rate (%)</td>
          <td> 1995-2000</td>
          <td>  2.48</td>
        </tr>
        <tr>
          <th>10</th>
          <td>                        Population growth rate (%)</td>
          <td> 2000-2005</td>
          <td>  2.67</td>
        </tr>
        <tr>
          <th>11</th>
          <td>                        Population growth rate (%)</td>
          <td> 2005-2010</td>
          <td>  2.78</td>
        </tr>
        <tr>
          <th>12</th>
          <td>                        Population growth rate (%)</td>
          <td> 2010-2015</td>
          <td>  2.90</td>
        </tr>
        <tr>
          <th>13</th>
          <td>         Net migration rate (per 1,000 population)</td>
          <td> 1950-1955</td>
          <td>  2.50</td>
        </tr>
        <tr>
          <th>14</th>
          <td>         Net migration rate (per 1,000 population)</td>
          <td> 1955-1960</td>
          <td>  3.00</td>
        </tr>
        <tr>
          <th>15</th>
          <td>         Net migration rate (per 1,000 population)</td>
          <td> 1960-1965</td>
          <td>  2.90</td>
        </tr>
        <tr>
          <th>16</th>
          <td>         Net migration rate (per 1,000 population)</td>
          <td> 1965-1970</td>
          <td>  4.40</td>
        </tr>
        <tr>
          <th>17</th>
          <td>         Net migration rate (per 1,000 population)</td>
          <td> 1970-1975</td>
          <td>  2.90</td>
        </tr>
        <tr>
          <th>18</th>
          <td>         Net migration rate (per 1,000 population)</td>
          <td> 1975-1980</td>
          <td> -5.10</td>
        </tr>
        <tr>
          <th>19</th>
          <td>         Net migration rate (per 1,000 population)</td>
          <td> 1980-1985</td>
          <td> -2.80</td>
        </tr>
        <tr>
          <th>20</th>
          <td>         Net migration rate (per 1,000 population)</td>
          <td> 1985-1990</td>
          <td> -1.70</td>
        </tr>
        <tr>
          <th>21</th>
          <td>         Net migration rate (per 1,000 population)</td>
          <td> 1990-1995</td>
          <td> -1.70</td>
        </tr>
        <tr>
          <th>22</th>
          <td>         Net migration rate (per 1,000 population)</td>
          <td> 1995-2000</td>
          <td> -4.50</td>
        </tr>
        <tr>
          <th>23</th>
          <td>         Net migration rate (per 1,000 population)</td>
          <td> 2000-2005</td>
          <td> -2.90</td>
        </tr>
        <tr>
          <th>24</th>
          <td>         Net migration rate (per 1,000 population)</td>
          <td> 2005-2010</td>
          <td> -2.70</td>
        </tr>
        <tr>
          <th>25</th>
          <td>         Net migration rate (per 1,000 population)</td>
          <td> 2010-2015</td>
          <td> -1.40</td>
        </tr>
        <tr>
          <th>26</th>
          <td> Net migration (per year), both sexes combined ...</td>
          <td> 1950-1955</td>
          <td>  7.00</td>
        </tr>
        <tr>
          <th>27</th>
          <td> Net migration (per year), both sexes combined ...</td>
          <td> 1955-1960</td>
          <td>  9.00</td>
        </tr>
        <tr>
          <th>28</th>
          <td> Net migration (per year), both sexes combined ...</td>
          <td> 1960-1965</td>
          <td> 10.00</td>
        </tr>
        <tr>
          <th>29</th>
          <td> Net migration (per year), both sexes combined ...</td>
          <td> 1965-1970</td>
          <td> 17.00</td>
        </tr>
        <tr>
          <th>30</th>
          <td> Net migration (per year), both sexes combined ...</td>
          <td> 1970-1975</td>
          <td> 13.00</td>
        </tr>
        <tr>
          <th>31</th>
          <td> Net migration (per year), both sexes combined ...</td>
          <td> 1975-1980</td>
          <td>-27.00</td>
        </tr>
        <tr>
          <th>32</th>
          <td> Net migration (per year), both sexes combined ...</td>
          <td> 1980-1985</td>
          <td>-17.00</td>
        </tr>
        <tr>
          <th>33</th>
          <td> Net migration (per year), both sexes combined ...</td>
          <td> 1985-1990</td>
          <td>-12.00</td>
        </tr>
        <tr>
          <th>34</th>
          <td> Net migration (per year), both sexes combined ...</td>
          <td> 1990-1995</td>
          <td>-14.00</td>
        </tr>
        <tr>
          <th>35</th>
          <td> Net migration (per year), both sexes combined ...</td>
          <td> 1995-2000</td>
          <td>-42.00</td>
        </tr>
        <tr>
          <th>36</th>
          <td> Net migration (per year), both sexes combined ...</td>
          <td> 2000-2005</td>
          <td>-30.00</td>
        </tr>
        <tr>
          <th>37</th>
          <td> Net migration (per year), both sexes combined ...</td>
          <td> 2005-2010</td>
          <td>-33.00</td>
        </tr>
        <tr>
          <th>38</th>
          <td> Net migration (per year), both sexes combined ...</td>
          <td> 2010-2015</td>
          <td>-20.00</td>
        </tr>
      </tbody>
    </table>
    <p>39 rows Ã— 3 columns</p>
    </div>
  metadata
    {
     "collapsed": false
    }
markdown
    That's more concise but let's create a pivot table from it so it's even easier to read.
code 4
    df_pivot = filtered_df.pivot_table('Value', 'Year', 'Variable')
    df_pivot.head(5)
  execute_result
  - text/plain
    Variable   Net migration (per year), both sexes combined (thousands)  \
    Year                                                                   
    1950-1955                                                  7           
    1955-1960                                                  9           
    1960-1965                                                 10           
    1965-1970                                                 17           
    1970-1975                                                 13           
    
    Variable   Net migration rate (per 1,000 population)  \
    Year                                                   
    1950-1955                                        2.5   
    1955-1960                                        3.0   
    1960-1965                                        2.9   
    1965-1970                                        4.4   
    1970-1975                                        2.9   
    
    Variable   Population growth rate (%)  
    Year                                   
    1950-1955                        2.33  
    1955-1960                        2.66  
    1960-1965                        2.77  
    1965-1970                        2.90  
    1970-1975                        3.00  
    
    [5 rows x 3 columns]
  - text/html
    <div style="max-height:1000px;max-width:1500px;overflow:auto;">
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th>Variable</th>
          <th>Net migration (per year), both sexes combined (thousands)</th>
          <th>Net migration rate (per 1,000 population)</th>
          <th>Population growth rate (%)</th>
        </tr>
        <tr>
          <th>Year</th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>1950-1955</th>
          <td>  7</td>
          <td> 2.5</td>
          <td> 2.33</td>
        </tr>
        <tr>
          <th>1955-1960</th>
          <td>  9</td>
          <td> 3.0</td>
          <td> 2.66</td>
        </tr>
        <tr>
          <th>1960-1965</th>
          <td> 10</td>
          <td> 2.9</td>
          <td> 2.77</td>
        </tr>
        <tr>
          <th>1965-1970</th>
          <td> 17</td>
          <td> 4.4</td>
          <td> 2.90</td>
        </tr>
        <tr>
          <th>1970-1975</th>
          <td> 13</td>
          <td> 2.9</td>
          <td> 3.00</td>
        </tr>
      </tbody>
    </table>
    <p>5 rows Ã— 3 columns</p>
    </div>
  metadata
    {
     "collapsed": false,
     "render": true
    }
markdown
    Now we can plot the data.
code 5
    %matplotlib inline
  metadata
    {
     "collapsed": false
    }
code 62
    import numpy as np
    plt.figure(figsize = (6,4), dpi = 72)
    plt.plot(df_pivot.ix[:,0:1], label="Net migration (per year), both sexes combined (thousands)")
    plt.plot(df_pivot.ix[:,1:2], label="Net migration rate (per 1,000 population)")
    plt.plot(df_pivot.ix[:,2:3], label="Population growth rate (%)")
    plt.xlabel('Year')
    plt.ylabel('Migration Rates')
    plt.title('Annual Senegal Population Growth')
    xvalues = list(df_pivot.index)
    x = np.array(range(0,len(xvalues)))
    plt.xticks(x,xvalues, rotation=70)
    plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)
    plt.show()
  display_data
  - image/png
    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
    gg==
    
  - text/plain
    <matplotlib.figure.Figure at 0x7fe155614b90>
  metadata
    {
     "collapsed": false,
     "scrolled": true
    }
markdown
    ## References
    
    * [Demographics of Senegal](http://en.wikipedia.org/wiki/Demographics_of_Senegal)
    * [United Nations World Population Prospects](http://esa.un.org/unpd/wpp/index.htm)
markdown
    <div class="alert" style="border: 1px solid #aaa; background: radial-gradient(ellipse at center, #ffffff 50%, #eee 100%);">
    <div class="row">
        <div class="col-sm-1"><img src="https://knowledgeanyhow.org/static/images/favicon_32x32.png" style="margin-top: -6px"/></div>
        <div class="col-sm-11">This notebook was created using [IBM Knowledge Anyhow Workbench](https://knowledgeanyhow.org).  To learn more, visit us at https://knowledgeanyhow.org.</div>
        </div>
    </div>
metadata
    {
     "kernelspec": {
      "display_name": "Python 2",
      "language": "python",
      "name": "python2"
     },
     "language_info": {
      "codemirror_mode": {
       "name": "ipython",
       "version": 2
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython2",
      "version": "2.7.6"
     }
    }
